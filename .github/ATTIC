
		//fprintf( stderr, "You can figure out whose fault it is with:\n" );
		//fprintf( stderr, " sudo netstat -nap | grep 5353\n" );
		//fprintf( stderr, "Is avahi running? If so, you can kill it with:\n" );
		//fprintf( stderr, " sudo systemctl disable avahi-daemon\n" );
		//fprintf( stderr, " sudo service avahi-daemon stop\n" );


/*
//			else
	//			SendSpecificService( i, namestartptr, xactionid, stlen, 1 );
		for( i = 0; i < MAX_MDNS_NAMES; i++ )
		{
			//Handle [hostname].local, or [hostname].[service].local
			if( MDNSNames[i] && dotlen && strncmp( MDNSNames[i], path, dotlen ) == 0 && dotlen == strlen( MDNSNames[i] ))
			{
				found = 1;
				if( record_type == 0x0001 ) //A Name Lookup.
					SendOurARecord( namestartptr, xactionid, stlen, 1 );
				else
					SendSpecificService( i, namestartptr, xactionid, stlen, 1 );
			}
		}
*/


#if 0

		if( !found ) //Not a specific entry lookup...
		{
			//Is this a browse?
			if( strcmp( path, "_services._dns-sd._udp.local" ) == 0 )
			{
				SendAvailableServices( namestartptr, xactionid, stlen );
			}
			else
			{
				// FUTURE: Possibly support services.
/*
				//A specific service?
				for( i = 0; i < MAX_MDNS_SERVICES; i++ )
				{
					const char * srv = MDNSServices[i];
					if( !srv ) continue;
					int sl = strlen( srv );
					if( strncmp( path, srv, sl ) == 0 )
					{
						SendSpecificService( i, namestartptr, xactionid, stlen, 0 );
					}
				}
*/
			}
		}
#endif














// Bonus: We can keep around a list of addesses known to ports
// so when we get an MDNS request on IPv4, we can also servce a
// ipv6 reply.
struct sockaddr_in * sockaddrListByIFace4;
int    maxIFaceList4;
struct sockaddr_in6 * sockaddrListByIFace6;
int    maxIFaceList6;




		// Bonus - for keeping known addess-to-interface mapping, specifcally to support ping6.
		if( ifindex >= maxIFaceList4 )
		{
			int newlen = ifindex + 1;
			sockaddrListByIFace4 = realloc( sockaddrListByIFace4, newlen * sizeof( sockaddrListByIFace4[0] ) );
			memset( sockaddrListByIFace4 + maxIFaceList4, 0, sizeof( sockaddrListByIFace4[0] ) * (newlen - maxIFaceList4) );
			maxIFaceList4 = newlen;
		}
		memcpy( &sockaddrListByIFace4[ifindex], sa4, sizeof( sockaddrListByIFace4[0] ) );


		// Bonus - for keeping known addess-to-interface mapping, specifcally to support ping6.
		if( ifindex >= maxIFaceList6 )
		{
			int newlen = ifindex + 1;
			sockaddrListByIFace6 = realloc( sockaddrListByIFace6, newlen * sizeof( sockaddrListByIFace6[0] ) );
			memset( sockaddrListByIFace6 + maxIFaceList6, 0, sizeof( sockaddrListByIFace6[0] ) * (newlen - maxIFaceList6) );
			maxIFaceList6 = newlen;
		}
		memcpy( &sockaddrListByIFace6[ifindex], sa6, sizeof( sockaddrListByIFace6[0] ) );	
		printf( "Updating index %d / %d\n", ifindex, sa6->sin6_family );
